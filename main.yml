---
- hosts: bastion
  vars:
    ssh_key_file_public: "~/.ssh/id_rsa-{{ dns_domain }}.pub"
    ssh_key_file_private: "~/.ssh/id_rsa-{{ dns_domain }}"
  vars_prompt:
    - name: openshift_password
      prompt: "Type your OpenShift password to the dev cluster (same password you use to login to the website, it will not be recorded)"
      private: yes

  tasks:
    - set_fact: workshop="rhel-custom-security-content"
      when: workshop is undefined

    - name: create aws credentials directory
      file:
        path: ~/.aws
        state: directory
        mode: 0700
  
    - name: create aws subdirectories
      file:
        path: "~/aws/{{ item }}"
        state: directory
        mode: 0755
      with_items:
        - myconfigs
        - testrun

    - name: Set agnosticd output dir for templates
      set_fact:
        output_dir: "/tmp/workdir/"

    - name: copy execution script
      copy:
        src: run.sh
        dest: "~/run.sh"
        mode: 0755

    - name: create symbolic link to run script for stop
      file:
        src: ~/run.sh
        dest: ~/stop.sh
        state: link
  
    - name: create aws credentials file
      template:
        src: credentials.j2
        dest: ~/.aws/credentials
        mode: 0600

    - name: create deployer vars credentials file
      template:
        src: opentlc_creds.j2
        dest: ~/.aws/opentlc_creds.yml
        mode: 0600
  
    - name: install required software
      yum:
        name:
          - git
          - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      become: yes

    - name: install pip for python2
      yum:
        name:
          - python2-pip
          - python2-simplejson
        state: present
      become: yes
  
    - name: clone agnosticd repo
      git:
        repo: "https://github.com/{{ agnosticd_fork }}/agnosticd.git"
        dest: ~/agnosticd

    - name: install required python modules
      pip:
        name:
          - awscli
          - ansible
          - boto3
          - selinux
        state: latest
      become: yes

    - name: get zone ID for domain {{ dns_domain }}
      route53_info:
        query: hosted_zone
      register: hosted_zones

    - name: store zone ID
      set_fact:
        zone_id: "{{ hosted_zones | json_query(query) | regex_replace('.*/','') | regex_replace('.]$','') }}"
      vars:
        query: "HostedZones[?Name=='{{ dns_domain }}.'].Id"

    - debug:
        msg: "Zone ID for domain {{ dns_domain }} is {{ zone_id }}."

    - name: create ssh key
      openssh_keypair:
        path: "{{ ssh_key_file_private }}"

    - name: link key to id_rsa
      file:
        src: "{{ ssh_key_file_private }}"
        dest: ~/.ssh/id_rsa
        state: link

    - name: retrieve generated key
      fetch:
        src: "{{ item }}"
        dest: "{{ item }}"
        flat: yes
      with_items:
        - "{{ ssh_key_file_private }}"
        - "{{ ssh_key_file_public }}"

    - name: create AWS key
      ec2_key:
        name: id_rsa
        region: "{{ region }}"
        state: present
        key_material: "{{ lookup('file', ssh_key_file_public ) }}"
      register: ec2_key

    - debug:
        var: ec2_key

    - name: create deployment template for {{ workshop }}
      template:
        src: "sample_vars-{{ workshop }}.j2"
        dest: "~/aws/myconfigs/sample_vars-{{ workshop }}.yml"
        mode: 0644

    - name: copy ssh key for login
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', ssh_key_file_public ) }}"

    - name: Deploy lab using agnosticd (This task takes up to 40 minutes)
      shell: "bash ~/run.sh {{ workshop }}"
      tags:
        - deploy-lab
      when: destroy_lab is not defined

    - name: Destroying lab using agnosticd
      shell: "bash ~/stop.sh {{ workshop }}"
      tags:
        - deploy-lab
      when: destroy_lab is defined

    - name: Fetch user-data.yml
      fetch:
        src: "{{ output_dir }}/user-data.yaml"
        dest: /tmp/user-data-{{ inventory_hostname }}.yaml
        flat: yes
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: Import variables from user-data.yml
      include_vars:
        file: /tmp/user-data-{{ inventory_hostname }}.yaml
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: clone {{ workshop }} documentation repo
      git:
        repo: "https://gitlab.com/2020-summit-labs/{{ workshop }}.git"
        dest: "~/{{ workshop }}"
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: delete workshop-vars.js
      file:
        path: "~/{{ workshop }}/workshop-vars-{{ workshop }}.js"
        state: absent
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: create workshop-vars.js template for Bookbag documentation
      template:
        src: "workshop-vars-{{ workshop }}.j2"
        dest: "~/{{ workshop }}/workshop-vars.js"
        mode: 0644
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: Download oc cli
      become: yes
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
        dest: ~/openshift-client-linux.tar.gz
      tags:
        - setup-oc-cli
      when: destroy_lab is not defined

    - name: Extract oc cli into ~/
      become: yes
      unarchive:
        src: ~/openshift-client-linux.tar.gz
        dest: /usr/local/bin
        remote_src: yes
      tags:
        - setup-oc-cli
      when: destroy_lab is not defined

    - name: Login into dev cluster
      command: "oc login --server=https://api.cluster-rhsummit-dev.rhsummit-dev.events.opentlc.com:6443 --password {{ openshift_password }} --username {{ ansible_user }} --insecure-skip-tls-verify=true"
      args:
        chdir: "~/{{ workshop }}"
      when: destroy_lab is not defined
      no_log: True

    - name: Change oc project
      command: "oc project user-{{ ansible_user | replace('.','-') }}"
      args:
        chdir: "~/{{ workshop }}"
      when: destroy_lab is not defined

    - name: prepare to build image from template
      shell: 'oc process -f build-template.yaml -p GIT_REPO="https://gitlab.com/2020-summit-labs/{{ workshop }}.git" | oc apply -f -'
      args:
        chdir: "~/{{ workshop }}"
      when: destroy_lab is not defined

    - name: build image from template
      command: "oc start-build bookbag --follow"
      args:
        chdir: "~/{{ workshop }}"
      when: destroy_lab is not defined

    - name: Change oc project
      shell: 'oc process -f deploy-template.yaml NAME="bookbag" -p IMAGE_STREAM_NAME="bookbag" -p WORKSHOP_VARS="$(cat workshop-vars.js)" | oc apply -f -'
      args:
        chdir: "~/{{ workshop }}"
      when: destroy_lab is not defined

    - name: Get route to bookbag
      command: "oc get route bookbag --template='{{ '{{' }} .spec.host {{ '}}' }}'"
      args:
        chdir: "~/{{ workshop }}"
      register: output_results
      when: destroy_lab is not defined

    - name: Logout oc
      command: 'oc logout'
      when: destroy_lab is not defined

    - debug:
        msg: "Use this link to access the documentation deployed containing all credentials to access the lab: {{ output_results.stdout }}"
      when: destroy_lab is not defined

...
